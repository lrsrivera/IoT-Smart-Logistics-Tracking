// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract IoTDataStorage {
    // Struct for each package update
    struct PackageUpdate {
        uint256 timestamp;
        string city;
        int256 latitude;
        int256 longitude;
        int256 temperatureCelsius;
        string status;
    }

    // Mapping from packageId to array of updates (history)
    mapping(string => PackageUpdate[]) private packageHistory;

    // List of all package IDs 
    string[] private packageIds;
    mapping(string => bool) private packageExists;

    // Owner for access control
    address public owner;

    // Max updates per package
    uint256 public constant MAX_ENTRIES = 100;

    // Event for new update
    event PackageUpdated(
        string packageId,
        uint256 timestamp,
        string city,
        int256 latitude,
        int256 longitude,
        int256 temperatureCelsius,
        string status
    );

    // Only owner can add data
    modifier onlyOwner() {
        require(msg.sender == owner, "Not authorized");
        _;
    }

    constructor() {
        owner = msg.sender;
    }

    // Store a new update for a package
    function storeUpdate(
        string memory packageId,
        string memory city,
        int256 latitude,
        int256 longitude,
        int256 temperatureCelsius,
        string memory status
    ) public onlyOwner {
        require(packageHistory[packageId].length < MAX_ENTRIES, "Max entries reached for this package");

        // Add packageId to list if it's new
        if (!packageExists[packageId]) {
            packageIds.push(packageId);
            packageExists[packageId] = true;
        }

        packageHistory[packageId].push(PackageUpdate(
            block.timestamp,
            city,
            latitude,
            longitude,
            temperatureCelsius,
            status
        ));

        emit PackageUpdated(
            packageId,
            block.timestamp,
            city,
            latitude,
            longitude,
            temperatureCelsius,
            status
        );
    }

    // Get the latest update for a package
    function getLatestUpdate(string memory packageId) public view returns (
        uint256 timestamp,
        string memory city,
        int256 latitude,
        int256 longitude,
        int256 temperatureCelsius,
        string memory status
    ) {
        require(packageHistory[packageId].length > 0, "No updates for this package");
        PackageUpdate memory update = packageHistory[packageId][packageHistory[packageId].length - 1];
        return (
            update.timestamp,
            update.city,
            update.latitude,
            update.longitude,
            update.temperatureCelsius,
            update.status
        );
    }

    // Get the full history for a package (by index)
    function getUpdateByIndex(string memory packageId, uint256 index) public view returns (
        uint256 timestamp,
        string memory city,
        int256 latitude,
        int256 longitude,
        int256 temperatureCelsius,
        string memory status
    ) {
        require(index < packageHistory[packageId].length, "Index out of bounds");
        PackageUpdate memory update = packageHistory[packageId][index];
        return (
            update.timestamp,
            update.city,
            update.latitude,
            update.longitude,
            update.temperatureCelsius,
            update.status
        );
    }

    // Get the number of updates for a package
    function getUpdateCount(string memory packageId) public view returns (uint256) {
        return packageHistory[packageId].length;
    }

    // Get all package IDs
    function getAllPackageIds() public view returns (string[] memory) {
        return packageIds;
    }
}
